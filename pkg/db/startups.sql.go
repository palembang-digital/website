// Code generated by sqlc. DO NOT EDIT.
// source: startups.sql

package db

import (
	"context"
	"time"
)

const createStartup = `-- name: CreateStartup :one
INSERT INTO startups (
    name
    , image_url
    , slug
    , one_liner
    , description
    , website
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateStartupParams struct {
	Name        string `db:"name" json:"name"`
	ImageUrl    string `db:"image_url" json:"image_url"`
	Slug        string `db:"slug" json:"slug"`
	OneLiner    string `db:"one_liner" json:"one_liner"`
	Description string `db:"description" json:"description"`
	Website     string `db:"website" json:"website"`
}

func (q *Queries) CreateStartup(ctx context.Context, arg CreateStartupParams) (int64, error) {
	row := q.db.QueryRow(ctx, createStartup,
		arg.Name,
		arg.ImageUrl,
		arg.Slug,
		arg.OneLiner,
		arg.Description,
		arg.Website,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteStartup = `-- name: DeleteStartup :exec
DELETE FROM startups WHERE id = $1
`

func (q *Queries) DeleteStartup(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStartup, id)
	return err
}

const getStartupByID = `-- name: GetStartupByID :one
SELECT
    id
    , name
    , image_url
    , slug
    , one_liner
    , description
    , website
    , created_at
    , updated_at
FROM startups
WHERE id = $1
`

type GetStartupByIDRow struct {
	ID          int64     `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	ImageUrl    string    `db:"image_url" json:"image_url"`
	Slug        string    `db:"slug" json:"slug"`
	OneLiner    string    `db:"one_liner" json:"one_liner"`
	Description string    `db:"description" json:"description"`
	Website     string    `db:"website" json:"website"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetStartupByID(ctx context.Context, id int64) (GetStartupByIDRow, error) {
	row := q.db.QueryRow(ctx, getStartupByID, id)
	var i GetStartupByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.Slug,
		&i.OneLiner,
		&i.Description,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStartupBySlug = `-- name: GetStartupBySlug :one
SELECT
    id
    , name
    , image_url
    , slug
    , one_liner
    , description
    , website
    , created_at
    , updated_at
FROM startups
WHERE slug = $1
`

type GetStartupBySlugRow struct {
	ID          int64     `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	ImageUrl    string    `db:"image_url" json:"image_url"`
	Slug        string    `db:"slug" json:"slug"`
	OneLiner    string    `db:"one_liner" json:"one_liner"`
	Description string    `db:"description" json:"description"`
	Website     string    `db:"website" json:"website"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetStartupBySlug(ctx context.Context, slug string) (GetStartupBySlugRow, error) {
	row := q.db.QueryRow(ctx, getStartupBySlug, slug)
	var i GetStartupBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ImageUrl,
		&i.Slug,
		&i.OneLiner,
		&i.Description,
		&i.Website,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listStartups = `-- name: ListStartups :many
SELECT
    id
    , name
    , image_url
    , slug
    , one_liner
    , description
    , website
    , created_at
    , updated_at
FROM startups
`

type ListStartupsRow struct {
	ID          int64     `db:"id" json:"id"`
	Name        string    `db:"name" json:"name"`
	ImageUrl    string    `db:"image_url" json:"image_url"`
	Slug        string    `db:"slug" json:"slug"`
	OneLiner    string    `db:"one_liner" json:"one_liner"`
	Description string    `db:"description" json:"description"`
	Website     string    `db:"website" json:"website"`
	CreatedAt   time.Time `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time `db:"updated_at" json:"updated_at"`
}

func (q *Queries) ListStartups(ctx context.Context) ([]ListStartupsRow, error) {
	rows, err := q.db.Query(ctx, listStartups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListStartupsRow{}
	for rows.Next() {
		var i ListStartupsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ImageUrl,
			&i.Slug,
			&i.OneLiner,
			&i.Description,
			&i.Website,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
