// Code generated by sqlc. DO NOT EDIT.
// source: banners.sql

package db

import (
	"context"
)

const createBanner = `-- name: CreateBanner :one
INSERT INTO banners (text) VALUES ($1) RETURNING id
`

func (q *Queries) CreateBanner(ctx context.Context, text string) (int64, error) {
	row := q.db.QueryRow(ctx, createBanner, text)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteBanner = `-- name: DeleteBanner :exec
DELETE FROM banners WHERE id = $1
`

func (q *Queries) DeleteBanner(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBanner, id)
	return err
}

const getBanner = `-- name: GetBanner :one
SELECT
    id
    , text
    , created_at
    , updated_at
FROM banners
WHERE id = $1
`

func (q *Queries) GetBanner(ctx context.Context, id int64) (Banner, error) {
	row := q.db.QueryRow(ctx, getBanner, id)
	var i Banner
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBanners = `-- name: ListBanners :many
SELECT
    id
    , text
    , created_at
    , updated_at
FROM banners
`

func (q *Queries) ListBanners(ctx context.Context) ([]Banner, error) {
	rows, err := q.db.Query(ctx, listBanners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Banner{}
	for rows.Next() {
		var i Banner
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
