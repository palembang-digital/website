// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    uid
    , email
    , name
    , residence
    , job_profession
    , school_name
    , school_major
    , school_semester
    , find_job_profession
    , whatsapp_number
    , telegram_number
    , motivation
    , information_source
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) RETURNING uid
`

type CreateUserParams struct {
	Uid               string   `db:"uid" json:"uid"`
	Email             string   `db:"email" json:"email"`
	Name              string   `db:"name" json:"name"`
	Residence         string   `db:"residence" json:"residence"`
	JobProfession     string   `db:"job_profession" json:"job_profession"`
	SchoolName        string   `db:"school_name" json:"school_name"`
	SchoolMajor       string   `db:"school_major" json:"school_major"`
	SchoolSemester    int32    `db:"school_semester" json:"school_semester"`
	FindJobProfession string   `db:"find_job_profession" json:"find_job_profession"`
	WhatsappNumber    string   `db:"whatsapp_number" json:"whatsapp_number"`
	TelegramNumber    string   `db:"telegram_number" json:"telegram_number"`
	Motivation        string   `db:"motivation" json:"motivation"`
	InformationSource []string `db:"information_source" json:"information_source"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Uid,
		arg.Email,
		arg.Name,
		arg.Residence,
		arg.JobProfession,
		arg.SchoolName,
		arg.SchoolMajor,
		arg.SchoolSemester,
		arg.FindJobProfession,
		arg.WhatsappNumber,
		arg.TelegramNumber,
		arg.Motivation,
		arg.InformationSource,
	)
	var uid string
	err := row.Scan(&uid)
	return uid, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE uid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, uid string) error {
	_, err := q.db.Exec(ctx, deleteUser, uid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    uid
    , email
    , name
    , residence
    , job_profession
    , school_name
    , school_major
    , school_semester
    , find_job_profession
    , whatsapp_number
    , telegram_number
    , motivation
    , information_source
    , created_at
    , updated_at
FROM users
WHERE uid = $1
`

func (q *Queries) GetUser(ctx context.Context, uid string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, uid)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.Email,
		&i.Name,
		&i.Residence,
		&i.JobProfession,
		&i.SchoolName,
		&i.SchoolMajor,
		&i.SchoolSemester,
		&i.FindJobProfession,
		&i.WhatsappNumber,
		&i.TelegramNumber,
		&i.Motivation,
		&i.InformationSource,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
